library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flag,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(shape_mat,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem(2))
lapply(unique_vals, function(elem) elem[2]
)
sapply(flags,unique)
vapply(flags,unique,numerical(1))
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$popuation,flags$landmass,summary)
tapply(flags$popuation,flags$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replacement=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5,mean=10)
?rpois
rpois(5,lambda=10)
my_poisreplicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
clear
refresh()
clear()
renew()
cls()
setwd("C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning")
source("rs.R")
View(training)
C=training$classe
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
19622/4
19622/5
19622/6
19622/8
19622/10
19622/2
9811/11
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
rm(list=ls())
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
rm(list=ls())
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
install.packages("e1071")
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
warnings()
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
MdlPrd  <- predict(MdlFit,train)
confusionMatrix(MdlPrd,train$classe)
confusionMatrix(MdlPrd,test$classe)
MdlPrd  <- predict(MdlFit,test)
length(MdlPred)
length(MdlPrd)
confusionMatrix(MdlPrd,test$classe)
MdlFit$finalModel
MdlPrd  <- predict(MdlFit,test$classe)
MdlPrd  <- predict(MdlFit,test)
MdlPred
MdlPrd
MdlPrd  <- predict(MdlFit,test)
MdlPrd
length(MdlPrd)
dim(test)
dim(train)
?createDataPartition
dim(inTrain)
dim(-inTrain)
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
?train
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/example.R')
rm(list=ls())
load.packages("kernlab")
install.packages("kernlab")
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/example.R')
warnings()
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/example.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/example.R')
MdlFit
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
warnings()
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
MdlPrd      <- predict(MdlFit,testing)
confusionMatrix(MdlPrd,testing$classe)
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
PCtraining <- prComp(training)
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
PCtraining <- prComp(training)
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
sapply(TDATA,class())
tapply(TDATA,class())
tapply(TDATA,class(x))
?tapply
tapply(TDATA,names(TDATA),class(x))
tapply(TDATA,names(TDATA),class())
View(TDATA)
class(TDATA[1,])
for (i in 1:160)
class(TDATA[,i])
}
for (i in 1:160){
class(TDATA[,i])
}
for (i in 1:160){
print(class(TDATA[,i]))
}
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
rm(list=ls())
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
warnings()
View(TDATA)
which(names(TDATA)=="classe")
plot(TDATA$min_pitch_dumbbell,TDATA$classe)
as.numeric(TDATA$classe)
TDATA$classe
TDATA       <- read.csv("pml-training.csv")
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
print(confusionMatrix(MdlPrd,testing$classe))
TDATA[25,160]
TDATA[25,150]
TDATA       <- read.csv("pml-training.csv")
UDATA       <- TDATA[,7]
TDATA$classe[1:10]
TDATA[1:10,160]
UDATA       <- TDATA[,c(9,160)]
View(UDATA)
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
rm(ls())
rm(list=ls())
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
source('C:/Users/SAM/Google Drive/Coursera/Data Analytics/PracticalMachineLearning/PMachineLearning/rs.R')
CM
system.time( read.csv("pml-training.csv"))
View(SDATA)
?read.csv
